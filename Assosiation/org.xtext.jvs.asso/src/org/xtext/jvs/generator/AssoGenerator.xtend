/*
 * generated by Xtext 2.20.0
 */
package org.xtext.jvs.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.jvs.asso.Variable
import org.xtext.jvs.asso.Expression
import org.xtext.jvs.asso.FloatConstant
import org.xtext.jvs.asso.VariableRef
import org.xtext.jvs.asso.Plus
import org.xtext.jvs.asso.Minus
import org.xtext.jvs.asso.Mult
import org.xtext.jvs.asso.Div
import javax.swing.JOptionPane
import org.xtext.jvs.asso.EvalExpression
import static extension org.xtext.jvs.util.ExpressionCalc.*
import org.xtext.jvs.asso.NegFloatConstant

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class AssoGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		resource.allContents.filter(Variable).forEach[prettyPrint]
		resource.allContents.filter(EvalExpression).forEach[
			e | 
			e.prettyPrint 
			var result = e.expression.compute // compute is moved to 'org.xtext.jvs.ExpressionCalc' due to it also being used for hovering
			JOptionPane.showMessageDialog(null, "result = "+result,"Math Language", JOptionPane.INFORMATION_MESSAGE)
		]
	}	
		
	def void prettyPrint(Variable variable){
		System.out.println("let " + variable.name + " = " + variable.expression.toStringRep)			
	} 
	
	def void prettyPrint(EvalExpression ee){
		System.out.println("Expression = " + ee.expression.toStringRep)			
	} 
	
	def String toStringRep(Expression expression){
		switch expression {
			FloatConstant: expression.value + ""
			NegFloatConstant: "-"+expression.value
			VariableRef: expression.value.name
			Plus: '''(«expression.left.toStringRep» + «expression.right.toStringRep»)'''
			Minus: '''(«expression.left.toStringRep» - «expression.right.toStringRep»)'''
			Mult: '''(«expression.left.toStringRep» * «expression.right.toStringRep»)'''
			Div: '''(«expression.left.toStringRep» / «expression.right.toStringRep»)'''
		}
	}
}