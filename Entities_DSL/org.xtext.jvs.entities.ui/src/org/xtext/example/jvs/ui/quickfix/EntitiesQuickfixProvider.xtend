/*
 * generated by Xtext 2.20.0
 */
package org.xtext.example.jvs.ui.quickfix

import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider
import org.xtext.example.jvs.validation.EntitiesValidator
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
import org.eclipse.xtext.validation.Issue
import org.eclipse.xtext.ui.editor.quickfix.Fix
import org.xtext.example.jvs.entities.Attribute
import org.xtext.example.jvs.entities.Entity
import static extension org.eclipse.xtext.EcoreUtil2.*
import org.eclipse.xtext.diagnostics.Diagnostic
import org.xtext.example.jvs.entities.Model
import org.xtext.example.jvs.entities.EntitiesFactory

/**
 * Custom quickfixes.
 *
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#quick-fixes
 */
class EntitiesQuickfixProvider extends DefaultQuickfixProvider {

	@Fix(EntitiesValidator.INVALID_ENTITY_NAME)
	def void capitalizeEntityFirstLetter(Issue issue, IssueResolutionAcceptor acceptor){
		acceptor.accept(issue, // Error information
			"Capitalize first letter", //  Label
			"Capitalize first letter of '" + issue.data.get(0) + "' to '" + issue.data.get(0).toFirstUpper + "'", // Description
			"Entity.gif", // Icon
			[
				context | // Lambda function
				val xtextDoc = context.xtextDocument
				val firstLetter = xtextDoc.get(issue.offset, 1)
				xtextDoc.replace(issue.offset, 1, firstLetter.toFirstUpper)
			]
		)
	}

	@Fix(EntitiesValidator.INVALID_ATTRIBUTE_NAME)
	def void uncapitalizeAttributeFirstLetter(Issue issue, IssueResolutionAcceptor acceptor){
		acceptor.accept(issue, // Error information
			"Uncapitalize first letter", //  Label
			"Uncapitalize first letter of '" + issue.data.get(0) + "' to '" + issue.data.get(0).toFirstLower + "'", // Description
			"Attribute.gif", // Icon
			[
				element, context | // Lambda function
				(element as Attribute).name = issue.data.get(0).toFirstLower
			]
		)
	}
	
	@Fix(EntitiesValidator.HIERARCHY_CYCLE)
	def void removeSuperType(Issue issue, IssueResolutionAcceptor acceptor){
		acceptor.accept(issue,
			"Remove supertype",
			'''Remove supertype '«issue.data.get(0)»' ''',
			"delete_obj.gif",
			[
				element, context |
				(element as Entity).superType = null 
			]
		)
	}
	
	@Fix(Diagnostic.LINKING_DIAGNOSTIC)
	def createMissingEntity(Issue issue, IssueResolutionAcceptor acceptor){
		acceptor.accept(issue,
			"Create missing entity",
			"Create missing entity",
			"Entity.gif",
			[
				element, context |
				val currentEntity = element.getContainerOfType(Entity)
				val model = currentEntity.eContainer as Model
				model.entities.add(
					model.entities.indexOf(currentEntity)+1,
					EntitiesFactory.eINSTANCE.createEntity() => [
						name = context.xtextDocument.get(issue.offset, issue.length)
					]
				)
			]
		)
	}
	
	@Fix(Diagnostic.LINKING_DIAGNOSTIC)
	def removeNotExistingEntity(Issue issue, IssueResolutionAcceptor acceptor){
		acceptor.accept(issue,
			"Remove extends",
			"Remove extends",
			"Delete.gif",
			[
				element, context |
				val currentEntity = element.getContainerOfType(Entity)
				currentEntity.superType = null
			]
		)
	}
}
