/*
 * generated by Xtext 2.20.0
 */
package sdu.jvs.validation

import sdu.jvs.mathCompiler.ExternalRef
import org.eclipse.xtext.validation.Check
import sdu.jvs.mathCompiler.MathCompilerPackage
import sdu.jvs.mathCompiler.Variable
import sdu.jvs.mathCompiler.Expression
import sdu.jvs.mathCompiler.FloatConstant
import sdu.jvs.mathCompiler.NegFloatConstant
import sdu.jvs.mathCompiler.Div
import sdu.jvs.mathCompiler.Minus
import sdu.jvs.mathCompiler.Plus
import sdu.jvs.mathCompiler.Mult
import sdu.jvs.mathCompiler.VariableRef

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class MathCompilerValidator extends AbstractMathCompilerValidator {
	
//	public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					MathCompilerPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}
	
	@Check
	def checkNumberOfParameters(ExternalRef exRef){
		if (exRef.parameters.size != exRef.value.inputs.size){
			error(
				'''
				Number of parameters does not match external '«exRef.value.name»' definition!
				Found «exRef.parameters.size» but expected «exRef.value.inputs.size».
				''',
				MathCompilerPackage.Literals.EXTERNAL_REF__PARAMETERS,
				'INVALID_NUMBER_OF_PARAMETERS'
			)
		}	
	}
	
	@Check
	def checkSelfRefrencing(Variable v){
		if (containsSelf(v.expression, v.name)){
			error(
				'''Circular refrence in variable '«v.name»' ''',
				MathCompilerPackage.Literals.VARIABLE__EXPRESSION,
				'SELF_REFRENCE'
			)
		}
	}
	
	def boolean containsSelf(Expression e, String varName){
		switch e {
			ExternalRef: {
				for (param : e.parameters){
					if (param.containsSelf(varName)){
						return true
					}
				}
				false
			}
			FloatConstant,
			NegFloatConstant: false
			Plus: e.left.containsSelf(varName) ? true : e.right.containsSelf(varName)
			Minus: e.left.containsSelf(varName) ? true : e.right.containsSelf(varName)
			Mult: e.left.containsSelf(varName) ? true : e.right.containsSelf(varName)
			Div: e.left.containsSelf(varName) ? true : e.right.containsSelf(varName)
			VariableRef: e.value.name == varName ? true: e.value.expression.containsSelf(varName)
		}
		
	}
}
