/*
 * generated by Xtext 2.20.0
 */
package sdu.jvs.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import sdu.jvs.mathCompiler.MathCompilerPackage
import org.eclipse.xtext.scoping.IScope
import sdu.jvs.mathCompiler.VariableRef
import sdu.jvs.mathCompiler.Model

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class MathCompilerScopeProvider extends AbstractMathCompilerScopeProvider {

	val epackage = MathCompilerPackage.eINSTANCE

	override getScope(EObject context, EReference reference) {
		if (reference == epackage.variableRef_Value) {
			scopeForVariableRef(context)
		}
		return super.getScope(context, reference)
	}
		
	def protected void scopeForVariableRef(EObject context) {
		switch context{
			VariableRef: {
				if (context.value.eContainer instanceof Model) {
					System.out.println('Varible ' + context.value.name)
				} else {
					System.out.println('Functional Varible ' + context.value.name)
				}
			}
		}
	}

}
