/*
 * generated by Xtext 2.20.0
 */
package org.xtext.jvs.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.jvs.math.Exp
import org.xtext.jvs.math.MathExp
import javax.swing.JOptionPane
import org.xtext.jvs.math.Plus
import org.xtext.jvs.math.Minus
import org.xtext.jvs.math.Mult
import org.xtext.jvs.math.Div
import org.xtext.jvs.math.Primary
import org.xtext.jvs.math.Parenthesis
import org.xtext.jvs.math.Number

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MathGenerator extends AbstractGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		System.out.println("Generating!")
		val math = resource.allContents.filter(MathExp).next
		val result = math.compute
		System.out.println("Math expression = "+math.display)
		// For +1 score, replace with hovering, see Bettini Chapter 8
		JOptionPane.showMessageDialog(null, "result = "+result,"Math Language", JOptionPane.INFORMATION_MESSAGE)
	}
	
	//
	// Compute function: computes value of expression
	// Note: written according to illegal left-recursive grammar, requires fix
	//
	
	def int compute(MathExp math) { 
		math.exp.computeExp
	}
	
	def int computeExp(Exp exp) {
		val left = exp.left.computePrim
		switch exp.operator {
			Plus: left+exp.right.computeExp
			Minus: left-exp.right.computeExp
			Mult: left*exp.right.computeExp
			Div: left/exp.right.computeExp
			default: left
		}
	}
	
	def int computePrim(Primary primary) { 
		switch primary {
			Number: primary.value
			Parenthesis: (computeExp(primary.exp))
			default: throw new Error("Error in computePrim")
		}
	}

	def String displayPrim(Primary primary) {
		switch primary {
			Number: (primary as Number).value + ""
			Parenthesis: "(" + displayExp((primary as Parenthesis).exp) + ")"
			default: "Error in displayPrim"
		}
	}
	

	//
	// Display function: show complete syntax tree
	// Note: written according to illegal left-recursive grammar, requires fix
	//

	def CharSequence display(MathExp math) '''Math[«math.exp.displayExp»]'''
	def CharSequence displayExp(Exp exp) '''Exp[«exp.left.displayPrim»,«exp.operator?.displayOp»,«exp.right?.displayExp»]'''		
	def dispatch String displayOp(Plus op)  { "+" }
	def dispatch String displayOp(Minus op) { "-" }
	def dispatch String displayOp(Mult op) { "*" }
	def dispatch String displayOp(Div op) { "/" }
	def CharSequence displayFactor(Primary primary) { "?" }
	
}
